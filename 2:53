# ------------------- Multi-Day Comparison -------------------
st.markdown("---")
st.subheader("Multi-Day File Changes (Added / Deleted)")

# ------------------------------------------------------------------
# 1. Make sure we have at least one run in the DB
# ------------------------------------------------------------------
if not st.session_state.data_loaded or not st.session_state.current_hostname:
    st.info("Connect to a server and fetch data first.")
else:
    conn = init_db()                     # <-- reuse the same DB connection
    hostname = st.session_state.current_hostname
    available_dates = get_available_dates(conn, hostname)

    if not available_dates:
        st.info("No dates stored yet – run the collector at least once.")
        conn.close()
    else:
        # ------------------------------------------------------------------
        # 2. Let the user pick start / end dates
        # ------------------------------------------------------------------
        start_date = st.selectbox(
            "Start Date",
            available_dates,
            index=0,
            key="multi_start"
        )
        end_date = st.selectbox(
            "End Date",
            available_dates,
            index=len(available_dates)-1,
            key="multi_end"
        )

        # ------------------------------------------------------------------
        # 3. Validate that start < end
        # ------------------------------------------------------------------
        if available_dates.index(start_date) >= available_dates.index(end_date):
            st.warning("Please select an **End Date** that comes **after** the Start Date.")
        else:
            # --------------------------------------------------------------
            # 4. Build the two sets
            # --------------------------------------------------------------
            with st.spinner("Calculating added / deleted files …"):
                # Files that exist **on the start date**
                files_at_start = get_file_paths_set(conn, hostname, start_date)

                # Files that exist **on the end date**
                files_at_end   = get_file_paths_set(conn, hostname, end_date)

                # Added   = present at end but NOT at start
                added_files    = files_at_end - files_at_start

                # Deleted = present at start but NOT at end
                deleted_files  = files_at_start - files_at_end

            # --------------------------------------------------------------
            # 5. Show the results side-by-side
            # --------------------------------------------------------------
            st.success(
                f"**{start_date} → {end_date}**  "
                f"({len(added_files)} added, {len(deleted_files)} deleted)"
            )

            col_add, col_del = st.columns(2)

            with col_add:
                st.markdown("**Added Files**")
                if added_files:
                    df_add = pd.DataFrame(sorted(added_files), columns=["File Path"])
                    st.dataframe(df_add, use_container_width=True)
                else:
                    st.info("No files were added in this period.")

            with col_del:
                st.markdown("**Deleted Files**")
                if deleted_files:
                    df_del = pd.DataFrame(sorted(deleted_files), columns=["File Path"])
                    st.dataframe(df_del, use_container_width=True)
                else:
                    st.info("No files were deleted in this period.")
