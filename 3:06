# ------------------- Multi-Day Comparison (Day-by-Day) -------------------
st.markdown("---")
st.subheader("Day-by-Day File Changes (Added / Deleted)")

if not st.session_state.get("data_loaded") or not st.session_state.get("current_hostname"):
    st.info("Connect to a server and fetch data first.")
else:
    conn = init_db()
    hostname = st.session_state.current_hostname
    available_dates = get_available_dates(conn, hostname)

    if len(available_dates) < 2:
        st.info("Need **at least two different run dates** to compare.")
        conn.close()
    else:
        # Sort dates to avoid any order issues
        all_dates = sorted(available_dates)

        # UI: Select start and end
        start_date = st.selectbox("Start Date", all_dates, index=0, key="cmp_start")
        end_date = st.selectbox("End Date", all_dates, index=len(all_dates)-1, key="cmp_end")

        # --- CRITICAL: Ensure start < end and at least 2 days ---
        try:
            start_idx = all_dates.index(start_date)
            end_idx = all_dates.index(end_date)
        except ValueError:
            st.error("Selected date not found in database.")
            conn.close()
            st.stop()

        if start_idx >= end_idx:
            st.warning("Please select an **End Date after** the Start Date.")
        elif end_idx - start_idx < 1:
            st.warning("Select at least **two different days** to compare.")
        else:
            # --- SAFE: Now we have at least 2 days ---
            date_range = all_dates[start_idx : end_idx + 1]

            with st.spinner("Analyzing day-by-day changes..."):
                changes_by_date = []
                added_details   = {}
                deleted_details = {}

                # Start with first day
                previous_set = get_file_paths_set(conn, hostname, date_range[0])

                for i in range(1, len(date_range)):
                    today = date_range[i]
                    today_set = get_file_paths_set(conn, hostname, today)

                    added_today   = today_set - previous_set
                    deleted_today = previous_set - today_set

                    if added_today:
                        added_details[today] = sorted(added_today)
                    if deleted_today:
                        deleted_details[today] = sorted(deleted_today)

                    changes_by_date.append({
                        "Date": today,
                        "Added": len(added_today),
                        "Deleted": len(deleted_today)
                    })

                    previous_set = today_set

                summary_df = pd.DataFrame(changes_by_date)

            # --- Display Results ---
            total_days = len(date_range) - 1
            st.success(
                f"**{start_date} to {end_date}** – {total_days} day(s) analyzed "
                f"({summary_df['Added'].sum()} added, {summary_df['Deleted'].sum()} deleted)"
            )

            # Summary Table
            st.subheader("Summary per Day")
            st.dataframe(summary_df, use_container_width=True)

            # Detailed Lists
            if added_details or deleted_details:
                st.subheader("Detailed Changes")
                for d in date_range[1:]:
                    col_a, col_d = st.columns(2)
                    with col_a:
                        if d in added_details:
                            with st.expander(f"Added on {d} ({len(added_details[d])})"):
                                st.dataframe(
                                    pd.DataFrame(added_details[d], columns=["File Path"]),
                                    use_container_width=True
                                )
                        else:
                            st.caption(f"**{d}** – no additions")
                    with col_d:
                        if d in deleted_details:
                            with st.expander(f"Deleted on {d} ({len(deleted_details[d])})"):
                                st.dataframe(
                                    pd.DataFrame(deleted_details[d], columns=["File Path"]),
                                    use_container_width=True
                                )
                        else:
                            st.caption(f"**{d}** – no deletions")
            else:
                st.info("No file changes detected in this period.")

    conn.close()
